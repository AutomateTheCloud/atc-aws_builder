##---------------------------------------------------------------------------------------
# object: Lambda/Function/IAMPasswordPolicy
# notes:
#   - CIS Amazon Web Services Foundations
#     - 1.5: Ensure IAM password policy requires at least one uppercase letter
#     - 1.6: Ensure IAM password policy require at least one lowercase letter
#     - 1.7: Ensure IAM password policy require at least one symbol
#     - 1.8: Ensure IAM password policy require at least one number
#     - 1.9: Ensure IAM password policy requires minimum length of 14 or greater
#     - 1.10: Ensure IAM password policy prevents password reuse
#     - 1.11: Ensure IAM password policy expires passwords within 90 days or less 
##---------------------------------------------------------------------------------------
LambdaFunctionIAMPasswordPolicy:
  Type: "AWS::Lambda::Function"
  Properties:
    FunctionName: "iam-password-policy"
    Description: "IAM Password Policy"
    Code:
      ZipFile:
        !Sub |
          'use strict';
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const iam = new AWS.IAM({apiVersion: '2010-05-08'});
          exports.handler = (event, context, cb) => {
            console.log(`Invoke: ${!JSON.stringify(event)}`);
            const done = (err) => {
              if (err) {
                console.log(`Error: ${!JSON.stringify(err)}`);
                response.send(event, context, response.FAILED, {});
              } else {
                response.send(event, context, response.SUCCESS, {});
              }
            };
            if (event.RequestType === 'Delete') {
              iam.deleteAccountPasswordPolicy({}, done);
            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              iam.updateAccountPasswordPolicy({
                AllowUsersToChangePassword: ${AllowUsersToChangePassword},
                HardExpiry: ${HardExpiry},
                MaxPasswordAge: ${MaxPasswordAge},
                MinimumPasswordLength: ${MinimumPasswordLength},
                PasswordReusePrevention: ${PasswordReusePrevention},
                RequireLowercaseCharacters: ${RequireLowercaseCharacters},
                RequireNumbers: ${RequireNumbers},
                RequireSymbols: ${RequireSymbols},
                RequireUppercaseCharacters: ${RequireUppercaseCharacters},
              }, done);
            } else {
              cb(new Error(`unsupported RequestType: ${!event.RequestType}`));
            }
          };
    Handler: "index.handler"
    MemorySize: 128
    Role: !GetAtt "IAMRoleLambdaFunctionIAMPasswordPolicy.Arn"
    Runtime: "nodejs8.10"
    Timeout: 60
