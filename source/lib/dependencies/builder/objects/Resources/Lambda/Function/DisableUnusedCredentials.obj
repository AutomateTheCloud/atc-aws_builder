##---------------------------------------------------------------------------------------
# object: Lambda/Function/DisableUnusedCredentials
# notes:
#   - Based on AWS Lab: aws-security-benchmark
#     - https://github.com/awslabs/aws-security-benchmark/blob/master/architecture/create-benchmark-rules.yaml
#   - CIS Amazon Web Services Foundations
#     - 1.3: Ensure credentials unused for 90 days or greater are disabled
#     - 1.4: Ensure access keys are rotated every 90 days or less
##---------------------------------------------------------------------------------------
LambdaFunctionDisableUnusedCredentials:
  Type: "AWS::Lambda::Function"
  Properties:
    FunctionName: "disable-unused-credentials"
    Description: "Deletes unused passwords and disables unused access keys"
    Code:
      ZipFile: |
        #==================================================================================================
        # Function: disable-unused-credentials
        # Purpose:  Deletes unused passwords and disables unused access keys
        #==================================================================================================
        import boto3
        import json
        import datetime
        from datetime import date
        DEFAULT_AGE_THRESHOLD_IN_DAYS = 90
        #==================================================================================================
        # Function handler
        #==================================================================================================
        def lambda_handler(event, context):
            return_value = {}
            return_value['DeletedPasswords'] = []
            return_value['DisabledAccessKeys'] = []
            client = boto3.client('iam')
            now = date(datetime.date.today().year, datetime.date.today().month, datetime.date.today().day)
            # For each user, determine when:
            # (1) the user last logged in and
            # (2) when the user's access key were last used.
            for user in client.list_users()['Users']:
                # Users who have never logged in or who don't have a password won't have the 'PasswordLastUsed' property.
                if 'PasswordLastUsed' in user:
                    password_last_used = date(user['PasswordLastUsed'].year, user['PasswordLastUsed'].month, user['PasswordLastUsed'].day)
                    age = (now - password_last_used).days
                    if age > DEFAULT_AGE_THRESHOLD_IN_DAYS:
                        # Danger, Will Robinson! Disable the user's password (delete login profile).
                        print('The user {0} has not logged in to the console in {1} days.'.format(user['UserName'], age))
                        print('DELETING password for {0}.'.format(user['UserName']))
                        try:
                            if client.get_login_profile(UserName = user['UserName']):
                                response = client.delete_login_profile(UserName = user['UserName'])
                                return_value['DeletedPasswords'].append({'UserName': user['UserName'], 'PasswordLastUsed': str(user['PasswordLastUsed'])})
                        except:
                            #No-op
                            print('No login profile exists for {}. It may been already been deleted.'.format(user['UserName']))
                # Next, determine when the user's access keys were last used.
                for access_key in client.list_access_keys(UserName = user['UserName'])['AccessKeyMetadata']:
                    if access_key['Status'] == 'Active':
                        response = client.get_access_key_last_used(AccessKeyId = access_key['AccessKeyId'])
                        if 'LastUsedDate' in response['AccessKeyLastUsed']:
                            access_key_last_used_date = response['AccessKeyLastUsed']['LastUsedDate']
                            access_key_last_used_date = date(access_key_last_used_date.year, access_key_last_used_date.month, access_key_last_used_date.day)
                            age = (now - access_key_last_used_date).days
                            if age > DEFAULT_AGE_THRESHOLD_IN_DAYS:
                                # Disable the access key.
                                print('The access key {0} has not been used in {1} days.'.format(access_key['AccessKeyId'], age))
                                print('DISABLING access key {0}.'.format(access_key['AccessKeyId']))
                                response = client.update_access_key(
                                    UserName = user['UserName'],
                                    AccessKeyId = access_key['AccessKeyId'],
                                    Status = 'Inactive')
                                return_value['DisabledAccessKeys'].append({'AccessKeyId': access_key['AccessKeyId'], 'LastUsedDate': str(access_key_last_used_date)})
            return return_value

    Handler: "index.lambda_handler"
    MemorySize: 1024
    Role: !GetAtt "IAMRoleLambdaFunctionDisableUnusedCredentials.Arn"
    Runtime: "python2.7"
    Timeout: 10
  DependsOn:
    - "IAMRoleLambdaFunctionDisableUnusedCredentials"
